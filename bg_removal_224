import cv2
import numpy as np
import matplotlib.pyplot as plt
import os
import imageio
import glob
from PIL import Image
#== Parameters =======================================================================
BLUR = 9
CANNY_THRESH_1 = 10
CANNY_THRESH_2 = 200
MASK_DILATE_ITER = 10
MASK_ERODE_ITER = 10
MASK_COLOR = (0.0,0.0,0.0) # In BGR format

IMAGE_SIZE = 224
#== Processing =======================================================================
def get_image_paths():
    folder = '/Users/sin-yujin/Desktop/resize'
    files = os.listdir(folder)
    files.sort()
    files = ['{}/{}'.format(folder, file) for file in files]
    files.remove('/Users/sin-yujin/Desktop/resize/.DS_Store')
    return files

def get_image_paths_remove():
    folder = '/Users/sin-yujin/Desktop/petbottle'
    files = os.listdir(folder)
    files.sort()
    files = ['{}/{}'.format(folder, file) for file in files]
    files.remove('/Users/sin-yujin/Desktop/petbottle/.DS_Store')
    return files

def fix_size(im, desired_w=224, desired_h=224, fill_color=(0, 0, 0, 255)):
    #im = Image.open(fn)
    x, y = im.size

    ratio = x / y
    desired_ratio = desired_w / desired_h

    w = max(desired_w, x)
    h = int(w / desired_ratio)
    if h < y:
        h = y
        w = int(h * desired_ratio)

    new_im = Image.new('RGBA', (w, h), fill_color)
    new_im.paste(im, ((w - x) // 2, (h - y) // 2))
    return new_im.resize((desired_w, desired_h))

   
#== Processing =======================================================================


print('X_img_paths')
X_img_paths = get_image_paths()
print(X_img_paths)
print()
print()

i=0

for filename in X_img_paths:
    #print('Processing....')
    print(filename)
    img = cv2.imread(filename) #only png file!!
    gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
    #-- Edge detection -------------------------------------------------------------------
    edges = cv2.Canny(gray, CANNY_THRESH_1, CANNY_THRESH_2)
    edges = cv2.dilate(edges, None)
    edges = cv2.erode(edges, None)
    
    #-- Find contours in edges, sort by area ---------------------------------------------
    contour_info = []
    #_, contours, _ = cv2.findContours(edges, cv2.RETR_LIST, cv2.CHAIN_APPROX_NONE)
    # Previously, for a previous version of cv2, this line was: 
    contours, _ = cv2.findContours(edges, cv2.RETR_LIST, cv2.CHAIN_APPROX_NONE)
    # Thanks to notes from commenters, I've updated the code but left this note
    for c in contours:
        contour_info.append((
            c,
            cv2.isContourConvex(c),
            cv2.contourArea(c),
        ))
    contour_info = sorted(contour_info, key=lambda c: c[2], reverse=True)
    max_contour = contour_info[0]
    
    #-- Create empty mask, draw filled polygon on it corresponding to largest contour ----
    # Mask is black, polygon is white
    mask = np.zeros(edges.shape)
    cv2.fillConvexPoly(mask, max_contour[0], (255))
    
    #-- Smooth mask, then blur it --------------------------------------------------------
    mask = cv2.dilate(mask, None, iterations=MASK_DILATE_ITER)
    mask = cv2.erode(mask, None, iterations=MASK_ERODE_ITER)
    mask = cv2.GaussianBlur(mask, (BLUR, BLUR), 0)
    mask_stack = np.dstack([mask]*3)    # Create 3-channel alpha mask
    
    #-- Blend masked img into MASK_COLOR background --------------------------------------
    mask_stack  = mask_stack.astype('float32') / 255.0          # Use float matrices, 
    img = img.astype('float32') / 255.0                 #  for easy blending
    
    masked = (mask_stack * img) + ((1-mask_stack) * MASK_COLOR) # Blend
    
    masked = (masked * 255).astype('uint8')                     # Convert back to 8-bit 

    #cv2.imshow('img', masked)                                   # Display
    #cv2.waitKey()
    #print(type(masked))
    #print(img.size)
    #print(img.shape)
    #test_image = cv2.imread('/Users/sin-yujin/Desktop/petbottle/'+str(i)+'.png')
    #masked1 = cv2.resize(masked,(500,500),2,2, interpolation = cv2.INTER_CUBIC) #사이즈 현재 500*500
    
    cv2.imwrite('/Users/sin-yujin/Desktop/petbottle/remove'+str(i)+'.png', masked)
    i= i+1

    
X_img_paths_remove = get_image_paths_remove()
print()
print()
print(X_img_paths_remove)
i=0
for filename in X_img_paths_remove:
    #print(filename)
    
    img = Image.open(filename) #only png file!!
    new_image = fix_size(img)
    #print(new_image.size)
    #new_image.show()
    new_image.save('/Users/sin-yujin/Desktop/ratio/resize'+str(i)+'.png')
    i=i+1# Save    
    
    
