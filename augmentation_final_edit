import tensorflow as tf
import matplotlib
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import matplotlib.gridspec as gridspec
import numpy as np
import os
import cv2
from math import floor, ceil, pi
from PIL import Image,ImageDraw

# %matplotlib inline
plt.style.use('dark_background')

def get_image_paths():
    folder = './init'
    files = os.listdir(folder)
    files.sort()
    files = ['{}/{}'.format(folder, file) for file in files]
    files.remove('./init/.DS_Store')
    return files

X_img_paths = get_image_paths()
print('\nX_img_paths = ')
print(X_img_paths)
print('\n')


IMAGE_SIZE = 224

def tf_resize_images(X_img_file_paths):
    X_data = []
    tf.reset_default_graph()
    X = tf.placeholder(tf.float32, (None, None, 3))
    tf_img = tf.image.resize_images(X, (IMAGE_SIZE, IMAGE_SIZE), tf.image.ResizeMethod.NEAREST_NEIGHBOR)
    with tf.Session() as sess:
        sess.run(tf.global_variables_initializer())
        
        # Each image is resized individually as different image may be of different size.
        for index, file_path in enumerate(X_img_file_paths):
            print(index,file_path)
            img = mpimg.imread(file_path)[:, :, :3] # Do not read alpha channel.
            resized_img = sess.run(tf_img, feed_dict = {X: img})
            X_data.append(resized_img)

    X_data = np.array(X_data, dtype = np.float32) # Convert to numpy
    return X_data

X_imgs = tf_resize_images(X_img_paths)

scales = [0.90, 0.75, 0.60]

def central_scale_images(X_imgs, scales):
    # Various settings needed for Tensorflow operation
    boxes = np.zeros((len(scales), 4), dtype = np.float32)
    for index, scale in enumerate(scales):
        x1 = y1 = 0.5 - 0.5 * scale # To scale centrally
        x2 = y2 = 0.5 + 0.5 * scale
        boxes[index] = np.array([y1, x1, y2, x2], dtype = np.float32)
    box_ind = np.zeros((len(scales)), dtype = np.int32)
    crop_size = np.array([IMAGE_SIZE, IMAGE_SIZE], dtype = np.int32)
    
    X_scale_data = []
    tf.reset_default_graph()
    X = tf.placeholder(tf.float32, shape = (1, IMAGE_SIZE, IMAGE_SIZE, 3))
    # Define Tensorflow operation for all scales but only one base image at a time
    tf_img = tf.image.crop_and_resize(X, boxes, box_ind, crop_size)
    with tf.Session() as sess:
        sess.run(tf.global_variables_initializer())
        
        for img_data in X_imgs:
            batch_img = np.expand_dims(img_data, axis = 0)
            scaled_imgs = sess.run(tf_img, feed_dict = {X: batch_img})
            X_scale_data.extend(scaled_imgs)
     
    X_scale_data = np.array(X_scale_data, dtype = np.float32)
    return X_scale_data

# Produce each image at scaling of 90%, 75% and 60% of original image.
scaled_imgs = central_scale_images(X_imgs, scales)
#scaled_imgs == [img0 scaled to 0.90, img0 scaled to 0.75, img0 scaled to 0.60, img1 scaled to 0.90 ...]




count = 0

fig, ax = plt.subplots(figsize = (10,10))
for element in scaled_imgs:
    plt.imshow(element)
    plt.axis('off')
    plt.savefig('./dataset/'+str(count)+'.png')
    count=count+1
    
from math import ceil, floor
plt.style.use('dark_background')

def get_translate_parameters(index):
    if index == 0: # Translate left 20 percent
        offset = np.array([0.0, 0.2], dtype = np.float32)
        size = np.array([IMAGE_SIZE, ceil(0.8 * IMAGE_SIZE)], dtype = np.int32)
        w_start = 0
        w_end = int(ceil(0.8 * IMAGE_SIZE))
        h_start = 0
        h_end = IMAGE_SIZE
    elif index == 1: # Translate right 20 percent
        offset = np.array([0.0, -0.2], dtype = np.float32)
        size = np.array([IMAGE_SIZE, ceil(0.8 * IMAGE_SIZE)], dtype = np.int32)
        w_start = int(floor((1 - 0.8) * IMAGE_SIZE))
        w_end = IMAGE_SIZE
        h_start = 0
        h_end = IMAGE_SIZE
    elif index == 2: # Translate top 20 percent
        offset = np.array([0.8, 0.0], dtype = np.float32)
        size = np.array([ceil(0.8 * IMAGE_SIZE), IMAGE_SIZE], dtype = np.int32)
        w_start = 0
        w_end = IMAGE_SIZE
        h_start = 0
        h_end = int(ceil(0.8 * IMAGE_SIZE)) 
    else: # Translate bottom 20 percent
        offset = np.array([-0.8, 0.0], dtype = np.float32)
        size = np.array([ceil(0.8 * IMAGE_SIZE), IMAGE_SIZE], dtype = np.int32)
        w_start = 0
        w_end = IMAGE_SIZE
        h_start = int(floor((1 - 0.8) * IMAGE_SIZE))
        h_end = IMAGE_SIZE 
        
    return offset, size, w_start, w_end, h_start, h_end

def translate_images(X_imgs):
    offsets = np.zeros((len(X_imgs), 2), dtype = np.float32)
    print('LENGTH OF X_IMGS = '+ str(len(X_imgs)))
    n_translations = 4
    X_translated_arr = []
    
    tf.reset_default_graph()
    with tf.Session() as sess:
        sess.run(tf.global_variables_initializer())
        for i in range(n_translations):
            X_translated = np.zeros((len(X_imgs), IMAGE_SIZE, IMAGE_SIZE, 3), dtype = np.float32)
            X_translated.fill(1.0) # Filling background color
            base_offset, size, w_start, w_end, h_start, h_end = get_translate_parameters(i)
            offsets[:, :] = base_offset 
            glimpses = tf.image.extract_glimpse(X_imgs, size, offsets)
            
            glimpses = sess.run(glimpses)
            X_translated[:, h_start: h_start + size[0], w_start: w_start + size[1], :] = glimpses
            X_translated_arr.extend(X_translated)
    X_translated_arr = np.array(X_translated_arr, dtype = np.float32)
    return X_translated_arr


def quarter ():
    img = Image.open("./dataset/temp.png")
    draw = ImageDraw.Draw(img)
    draw.rectangle((845,130,1028,1010),fill='black')
    del draw
    img.save('./dataset/'+str(count)+'.png',"png",quality=100)
    
def half():
    img = Image.open("./dataset/temp.png")
    draw = ImageDraw.Draw(img)
    draw.rectangle((154,130,330,1010),fill='black')
    del draw
    img.save('./dataset/'+str(count)+'.png',"png",quality=100)

def threequarter ():
    img = Image.open("./dataset/temp.png")
    draw = ImageDraw.Draw(img)
    draw.rectangle((145,569,1027,1010),fill='black')
    del draw
    img.save('./dataset/'+str(count)+'.png',"png",quality=100)
    
def whole():
    img = Image.open("./dataset/temp.png")
    draw = ImageDraw.Draw(img)
    draw.rectangle((145,130,1028,568),fill='black')
    del draw
    img.save('./dataset/'+str(count)+'.png',"png",quality=100)
    
print("length of translated_imgs")
print(len(translated_imgs))

for index, element in enumerate(translated_imgs): 
    gs = gridspec.GridSpec(1, 1)
    gs.update(wspace = 0.30, hspace = 2)
    fig, ax = plt.subplots(figsize = (16, 16))
    plt.subplot(gs[0])
    plt.axis('off')
    plt.imshow(element)
    plt.savefig('./dataset/temp.png')
    print(index)
    if index < len(translated_imgs)/4:
        print('smaller than quarter')
        quarter()
    elif index < len(translated_imgs)/2:
        print('smaller than HALF')
        half()
    elif index < (len(translated_imgs)/4)*3:
        print('smaller than Three Quarter')
        threequarter()
    else: 
        print('smaller than whole')
        whole()
    
    count=count+1

os.remove('./dataset/temp.png')

def rotate_images(X_imgs):
    X_rotate = []
    tf.reset_default_graph()
    X = tf.placeholder(tf.float32, shape = (IMAGE_SIZE, IMAGE_SIZE, 3))
    k = tf.placeholder(tf.int32)
    tf_img = tf.image.rot90(X, k = k)
    with tf.Session() as sess:
        sess.run(tf.global_variables_initializer())
        for img in X_imgs:
            for i in range(3):  # Rotation at 90, 180 and 270 degrees
                rotated_img = sess.run(tf_img, feed_dict = {X: img, k: i + 1})
                X_rotate.append(rotated_img)
        
    X_rotate = np.array(X_rotate, dtype = np.float32)
    return X_rotate


rotated_imgs = rotate_images(X_imgs)
print(rotated_imgs.shape)

fig, ax = plt.subplots(figsize = (10, 10))

#rotate 270 degrees
for element in rotated_imgs:
    plt.subplot(1,1,1)
    plt.axis('off')
    plt.imshow(element)
    plt.savefig('./dataset/'+str(count)+'.png')
    count=count+1


def rotate_images(X_imgs, start_angle, end_angle, n_images):
    X_rotate = []
    iterate_at = (end_angle - start_angle) / (n_images - 1)
    
    tf.reset_default_graph()
    X = tf.placeholder(tf.float32, shape = (None, IMAGE_SIZE, IMAGE_SIZE, 3))
    radian = tf.placeholder(tf.float32, shape = (len(X_imgs)))
    tf_img = tf.contrib.image.rotate(X, radian)
    with tf.Session() as sess:
        sess.run(tf.global_variables_initializer())
    
        for index in range(n_images):
            degrees_angle = start_angle + index * iterate_at
            radian_value = degrees_angle * pi / 180  # Convert to radian
            radian_arr = [radian_value] * len(X_imgs)
            rotated_imgs = sess.run(tf_img, feed_dict = {X: X_imgs, radian: radian_arr})
            X_rotate.extend(rotated_imgs)

    X_rotate = np.array(X_rotate, dtype = np.float32)
    return X_rotate



# Start rotation at -90 degrees, end at 90 degrees and produce totally 14 images
rotated_imgs = rotate_images(X_imgs, -90, 90, 14)
print(rotated_imgs.shape)

fig, ax = plt.subplots(figsize = (16, 16))
gs = gridspec.GridSpec(1, 1)
gs.update(wspace = 0.30, hspace = 0.0002)

for i in range(len(X_imgs)*14):
    plt.figure(figsize=(10,10))
    plt.axis('off')
    plt.imshow(rotated_imgs[i])
    plt.savefig('./dataset/'+str(count)+'.png')
    count=count+1
    plt.show()

def add_salt_pepper_noise(X_imgs):
    # Need to produce a copy as to not modify the original image
    X_imgs_copy = X_imgs.copy()
    row, col, _ = X_imgs_copy[0].shape
    salt_vs_pepper = 0.2
    amount = 0.004
    num_salt = np.ceil(amount * X_imgs_copy[0].size * salt_vs_pepper)
    num_pepper = np.ceil(amount * X_imgs_copy[0].size * (1.0 - salt_vs_pepper))
    
    for X_img in X_imgs_copy:
        # Add Salt noise
        coords = [np.random.randint(0, i - 1, int(num_salt)) for i in X_img.shape]
        X_img[coords[0], coords[1], :] = 1

        # Add Pepper noise
        coords = [np.random.randint(0, i - 1, int(num_pepper)) for i in X_img.shape]
        X_img[coords[0], coords[1], :] = 0
    return X_imgs_copy


salt_pepper_noise_imgs = add_salt_pepper_noise(X_imgs)
print(salt_pepper_noise_imgs.shape)

fig, ax = plt.subplots(figsize = (10, 10))
for element in salt_pepper_noise_imgs:
    plt.subplot(1, 1, 1)
    plt.axis('off')
    plt.imshow(element)
    plt.savefig('./dataset/'+str(count)+'.png')
    count=count+1
def add_gaussian_noise(X_imgs):
    gaussian_noise_imgs = []
    row, col, _ = X_imgs[0].shape
    # Gaussian distribution parameters
    mean = 0
    var = 0.1
    sigma = var ** 0.5
    
    for X_img in X_imgs:
        gaussian = np.random.random((row, col, 1)).astype(np.float32)
        gaussian = np.concatenate((gaussian, gaussian, gaussian), axis = 2)
        gaussian_img = cv2.addWeighted(X_img, 0.75, 0.25 * gaussian, 0.25, 0)
        gaussian_noise_imgs.append(gaussian_img)
    gaussian_noise_imgs = np.array(gaussian_noise_imgs, dtype = np.float32)
    return gaussian_noise_imgs


gaussian_noise_imgs = add_gaussian_noise(X_imgs)
print(gaussian_noise_imgs.shape)


for element in gaussian_noise_imgs:
    plt.subplot(1, 1, 1)
    plt.axis('off')
    plt.imshow(element)
    plt.savefig('./dataset/'+str(count)+'.png')
    count=count+1

